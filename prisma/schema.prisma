// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// User table
model User {
    id              String    @id @default(uuid())
    username        String    @unique
    email           String    @unique
    password        String
    role            UserRole  @default(STUDENT)
    profile         Profile?
    token           String?   @db.Text
    enrollments     Enrollment[]
    coursesCreated  Course[]
    assignments     Assignment[]
    submissions     Submission[]
    progress        CourseProgress[]
    notifications   Notification[]
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
}

model Profile {
    id              String    @id @default(uuid())
    userId          String    @unique
    user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    firstName       String
    lastName        String
    bio             String?
    profilePicture  String?
    dateOfBirth     DateTime?
    location        String?
}

model Course {
    id              String    @id @default(uuid())
    title           String
    description     String    @db.Text
    authorId        String    
    author          User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
    category        String
    level           CourseLevel
    price           Int
    coverImage      String?
    modules         Module[]
    enrollments     Enrollment[]
    progress        CourseProgress[]
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
}

model Module {
    id              String    @id @default(uuid())
    courseId        String
    course          Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
    title           String
    description     String?
    order           Int
    lessons         Lesson[]
}

model Lesson {
    id              String    @id @default(uuid())
    moduleId        String
    module          Module    @relation(fields: [moduleId], references: [id], onDelete: Cascade)
    title           String
    content         String    @db.Text
    videoUrl        String?
    resourceUrls    String?
    order           Int
    assignments     Assignment[]
}

model Enrollment {
    id              String    @id @default(uuid())
    userId          String
    user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    courseId        String
    course          Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
    enrolledAt      DateTime  @default(now())
    completedAt     DateTime?
}

model Assignment {
    id              String    @id @default(uuid())
    lessonId        String
    lesson          Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    authorId        String
    author          User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
    title           String
    description     String    @db.Text
    maxScore        Int
    dueDate         DateTime
    submissions     Submission[]
}

model Submission {
    id              String    @id @default(uuid())
    content         String    @db.Text
    grade           Float?
    assignmentId    String
    userId          String
    assignment      Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
    user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    submittedAt     DateTime  @default(now())
}

model CourseProgress {
    id              String    @id @default(uuid())
    userId          String
    user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    courseId        String
    course          Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
    completedLessons String?
    progress        Float     @default(0)
    lastAccessedAt   DateTime  @default(now())
}

model Notification {
    id              String    @id @default(uuid())
    userId          String
    user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    message         String
    type            NotificationType
    isRead          Boolean   @default(false)
    createdAt       DateTime  @default(now())
}

enum UserRole {
    STUDENT
    INSTRUCTOR
    ADMIN
}

enum CourseLevel {
    BEGINNER
    INTERMEDIATE
    ADVANCED
    ALL_LEVELS
}

enum NotificationType {
    ENROLLMENT
    ASSIGNMENT
    COURSE_UPDATE
    SUBMISSION_GRADED
}
